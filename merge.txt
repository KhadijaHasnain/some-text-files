#include "array_visualizer.h"
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

void warmup(Visualizer *v, const uint8_t *arr, size_t len) {
    size_t anzahl_zeilen = 11;

    // Create a temporary array for warmup
    uint8_t *temp_arr = (uint8_t *)malloc(len * sizeof(uint8_t));
    if (temp_arr == NULL) {
        // Handle memory allocation failure if needed
        fprintf(stderr, "Memory allocation failed in warmup function\n");
        return;
    }

    // Copy the original array to the temporary array
    memcpy(temp_arr, arr, len * sizeof(uint8_t));

    visualizer_append_array(v, temp_arr);

    // Warm up the temporary array by shifting elements to the left
    for (size_t shift = 0; shift < anzahl_zeilen; shift++) {
        if (len > 0) {
            uint8_t firstElement = temp_arr[0];

            // Shift elements to the left
            for (size_t i = 1; i < len; i++) {
                temp_arr[i - 1] = temp_arr[i];
            }

            temp_arr[len - 1] = firstElement;

            // Visualize the array after each shift
            visualizer_append_array(v, temp_arr);
        }
    }

    // Free the temporary array
    free(temp_arr);
}

void merge(uint8_t *arr, uint8_t *b, size_t len_a, size_t len_b) {
    uint8_t *result_array = (uint8_t *)malloc((len_a + len_b) * sizeof(uint8_t));
    size_t i = 0, j = 0, k = 0;

    while (i < len_a && j < len_b) {
        if (arr[i] > b[j]) {
            result_array[k++] = arr[i++];
        } else {
            result_array[k++] = b[j++];
        }
    }

    // Copy the remaining elements from arr, if any
    while (i < len_a) {
        result_array[k++] = arr[i++];
    }

    // Copy the remaining elements from b, if any
    while (j < len_b) {
        result_array[k++] = b[j++];
    }

    // Copy the merged result back into the original array (arr)
    for (size_t x = 0; x < len_a + len_b; ++x) {
        arr[x] = result_array[x];
    }

    free(result_array);
}

void merge_three_arrays(uint8_t *a, uint8_t *b, uint8_t *c, size_t individual_len) {
    uint8_t *ab = (uint8_t *)malloc(2 * individual_len * sizeof(uint8_t));
    merge(a, b, individual_len, individual_len);
    merge(ab, c, 2 * individual_len, individual_len);
    free(ab);
}

void sort_it(Visualizer *v, uint8_t *arr, size_t len) {
    // Warm up the array
    warmup(v, arr, len);

    visualizer_append_array(v, arr);

    // Iterate with a step of 3
    for (size_t i = 3; i <= len; i *= 3) {
        // Iterate through the array with a step of i
        for (size_t j = 0; j < len; j += i) {
            // Perform three-way merge on the subarrays
            merge_three_arrays(arr + j, arr + j + i / 3, arr + j + 2 * i / 3, i / 3);
            visualizer_append_array(v, arr);
        }
    }

    visualizer_append_array(v, arr);
}
